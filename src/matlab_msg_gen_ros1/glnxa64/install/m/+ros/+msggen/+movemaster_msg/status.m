
classdef status < ros.Message
    %status MATLAB implementation of movemaster_msg/status
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.
    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'movemaster_msg/status' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '283025d1e58370fa7a43c23c572de06b' % The MD5 Checksum of the message definition
        PropertyList = { 'Joint' 'Setpoint' 'PulseCount' 'Error' 'Output' 'ControlLoop' 'IsDone' } % List of non-constant message properties
        ROSPropertyList = { 'joint' 'setpoint' 'pulse_count' 'error' 'output' 'control_loop' 'IsDone' } % List of non-constant ROS message properties
        PropertyMessageTypes = { '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Joint
        Setpoint
        PulseCount
        Error
        Output
        ControlLoop
        IsDone
    end
    methods
        function set.Joint(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'status', 'Joint');
            obj.Joint = char(val);
        end
        function set.Setpoint(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'status', 'Setpoint');
            obj.Setpoint = single(val);
        end
        function set.PulseCount(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'status', 'PulseCount');
            obj.PulseCount = single(val);
        end
        function set.Error(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'status', 'Error');
            obj.Error = single(val);
        end
        function set.Output(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'status', 'Output');
            obj.Output = single(val);
        end
        function set.ControlLoop(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'status', 'ControlLoop');
            obj.ControlLoop = single(val);
        end
        function set.IsDone(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'status', 'IsDone');
            obj.IsDone = logical(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.movemaster_msg.status.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.movemaster_msg.status(strObj);
        end
    end
end
