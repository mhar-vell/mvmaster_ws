// Generated by gencpp from file movemaster_msg/status.msg
// DO NOT EDIT!


#ifndef MOVEMASTER_MSG_MESSAGE_STATUS_H
#define MOVEMASTER_MSG_MESSAGE_STATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace movemaster_msg
{
template <class ContainerAllocator>
struct status_
{
  typedef status_<ContainerAllocator> Type;

  status_()
    : joint()
    , setpoint(0.0)
    , pulse_count(0.0)
    , error(0.0)
    , output(0.0)
    , control_loop(0.0)
    , IsDone(false)  {
    }
  status_(const ContainerAllocator& _alloc)
    : joint(_alloc)
    , setpoint(0.0)
    , pulse_count(0.0)
    , error(0.0)
    , output(0.0)
    , control_loop(0.0)
    , IsDone(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _joint_type;
  _joint_type joint;

   typedef float _setpoint_type;
  _setpoint_type setpoint;

   typedef float _pulse_count_type;
  _pulse_count_type pulse_count;

   typedef float _error_type;
  _error_type error;

   typedef float _output_type;
  _output_type output;

   typedef float _control_loop_type;
  _control_loop_type control_loop;

   typedef uint8_t _IsDone_type;
  _IsDone_type IsDone;





  typedef boost::shared_ptr< ::movemaster_msg::status_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::movemaster_msg::status_<ContainerAllocator> const> ConstPtr;

}; // struct status_

typedef ::movemaster_msg::status_<std::allocator<void> > status;

typedef boost::shared_ptr< ::movemaster_msg::status > statusPtr;
typedef boost::shared_ptr< ::movemaster_msg::status const> statusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::movemaster_msg::status_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::movemaster_msg::status_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace movemaster_msg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'movemaster_msg': ['/home/movemaster/Movemaster_UTFPR/src/matlab_msg_gen_ros1/glnxa64/src/movemaster_msg/msg'], 'std_msgs': ['/usr/local/MATLAB/R2021a/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::movemaster_msg::status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::movemaster_msg::status_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::movemaster_msg::status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::movemaster_msg::status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movemaster_msg::status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movemaster_msg::status_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::movemaster_msg::status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "283025d1e58370fa7a43c23c572de06b";
  }

  static const char* value(const ::movemaster_msg::status_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x283025d1e58370faULL;
  static const uint64_t static_value2 = 0x7a43c23c572de06bULL;
};

template<class ContainerAllocator>
struct DataType< ::movemaster_msg::status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "movemaster_msg/status";
  }

  static const char* value(const ::movemaster_msg::status_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::movemaster_msg::status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string joint\n"
"float32 setpoint\n"
"float32 pulse_count\n"
"float32 error\n"
"float32 output\n"
"float32 control_loop\n"
"bool IsDone\n"
;
  }

  static const char* value(const ::movemaster_msg::status_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::movemaster_msg::status_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joint);
      stream.next(m.setpoint);
      stream.next(m.pulse_count);
      stream.next(m.error);
      stream.next(m.output);
      stream.next(m.control_loop);
      stream.next(m.IsDone);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct status_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::movemaster_msg::status_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::movemaster_msg::status_<ContainerAllocator>& v)
  {
    s << indent << "joint: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.joint);
    s << indent << "setpoint: ";
    Printer<float>::stream(s, indent + "  ", v.setpoint);
    s << indent << "pulse_count: ";
    Printer<float>::stream(s, indent + "  ", v.pulse_count);
    s << indent << "error: ";
    Printer<float>::stream(s, indent + "  ", v.error);
    s << indent << "output: ";
    Printer<float>::stream(s, indent + "  ", v.output);
    s << indent << "control_loop: ";
    Printer<float>::stream(s, indent + "  ", v.control_loop);
    s << indent << "IsDone: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.IsDone);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOVEMASTER_MSG_MESSAGE_STATUS_H
