// Generated by gencpp from file movemaster_msg/setpoint.msg
// DO NOT EDIT!


#ifndef MOVEMASTER_MSG_MESSAGE_SETPOINT_H
#define MOVEMASTER_MSG_MESSAGE_SETPOINT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace movemaster_msg
{
template <class ContainerAllocator>
struct setpoint_
{
  typedef setpoint_<ContainerAllocator> Type;

  setpoint_()
    : set_1(0.0)
    , set_2(0.0)
    , set_3(0.0)
    , set_4(0.0)
    , set_5(0.0)
    , set_GRIP(false)
    , emergency_stop(false)
    , GoHome(0)  {
    }
  setpoint_(const ContainerAllocator& _alloc)
    : set_1(0.0)
    , set_2(0.0)
    , set_3(0.0)
    , set_4(0.0)
    , set_5(0.0)
    , set_GRIP(false)
    , emergency_stop(false)
    , GoHome(0)  {
  (void)_alloc;
    }



   typedef float _set_1_type;
  _set_1_type set_1;

   typedef float _set_2_type;
  _set_2_type set_2;

   typedef float _set_3_type;
  _set_3_type set_3;

   typedef float _set_4_type;
  _set_4_type set_4;

   typedef float _set_5_type;
  _set_5_type set_5;

   typedef uint8_t _set_GRIP_type;
  _set_GRIP_type set_GRIP;

   typedef uint8_t _emergency_stop_type;
  _emergency_stop_type emergency_stop;

   typedef int8_t _GoHome_type;
  _GoHome_type GoHome;





  typedef boost::shared_ptr< ::movemaster_msg::setpoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::movemaster_msg::setpoint_<ContainerAllocator> const> ConstPtr;

}; // struct setpoint_

typedef ::movemaster_msg::setpoint_<std::allocator<void> > setpoint;

typedef boost::shared_ptr< ::movemaster_msg::setpoint > setpointPtr;
typedef boost::shared_ptr< ::movemaster_msg::setpoint const> setpointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::movemaster_msg::setpoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::movemaster_msg::setpoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace movemaster_msg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'movemaster_msg': ['/home/movemaster/Movemaster_UTFPR/src/matlab_msg_gen_ros1/glnxa64/src/movemaster_msg/msg'], 'std_msgs': ['/usr/local/MATLAB/R2021a/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::movemaster_msg::setpoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::movemaster_msg::setpoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::movemaster_msg::setpoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::movemaster_msg::setpoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movemaster_msg::setpoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movemaster_msg::setpoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::movemaster_msg::setpoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aaa39b4215432c08ac9b36247ded9610";
  }

  static const char* value(const ::movemaster_msg::setpoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xaaa39b4215432c08ULL;
  static const uint64_t static_value2 = 0xac9b36247ded9610ULL;
};

template<class ContainerAllocator>
struct DataType< ::movemaster_msg::setpoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "movemaster_msg/setpoint";
  }

  static const char* value(const ::movemaster_msg::setpoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::movemaster_msg::setpoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 set_1\n"
"float32 set_2\n"
"float32 set_3\n"
"float32 set_4\n"
"float32 set_5\n"
"bool 	set_GRIP\n"
"bool 	emergency_stop\n"
"int8 	GoHome\n"
;
  }

  static const char* value(const ::movemaster_msg::setpoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::movemaster_msg::setpoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.set_1);
      stream.next(m.set_2);
      stream.next(m.set_3);
      stream.next(m.set_4);
      stream.next(m.set_5);
      stream.next(m.set_GRIP);
      stream.next(m.emergency_stop);
      stream.next(m.GoHome);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct setpoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::movemaster_msg::setpoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::movemaster_msg::setpoint_<ContainerAllocator>& v)
  {
    s << indent << "set_1: ";
    Printer<float>::stream(s, indent + "  ", v.set_1);
    s << indent << "set_2: ";
    Printer<float>::stream(s, indent + "  ", v.set_2);
    s << indent << "set_3: ";
    Printer<float>::stream(s, indent + "  ", v.set_3);
    s << indent << "set_4: ";
    Printer<float>::stream(s, indent + "  ", v.set_4);
    s << indent << "set_5: ";
    Printer<float>::stream(s, indent + "  ", v.set_5);
    s << indent << "set_GRIP: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.set_GRIP);
    s << indent << "emergency_stop: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.emergency_stop);
    s << indent << "GoHome: ";
    Printer<int8_t>::stream(s, indent + "  ", v.GoHome);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOVEMASTER_MSG_MESSAGE_SETPOINT_H
