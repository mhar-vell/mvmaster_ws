# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from movemaster_msg/setpoint.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class setpoint(genpy.Message):
  _md5sum = "aaa39b4215432c08ac9b36247ded9610"
  _type = "movemaster_msg/setpoint"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 set_1
float32 set_2
float32 set_3
float32 set_4
float32 set_5
bool 	set_GRIP
bool 	emergency_stop
int8 	GoHome"""
  __slots__ = ['set_1','set_2','set_3','set_4','set_5','set_GRIP','emergency_stop','GoHome']
  _slot_types = ['float32','float32','float32','float32','float32','bool','bool','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       set_1,set_2,set_3,set_4,set_5,set_GRIP,emergency_stop,GoHome

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(setpoint, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.set_1 is None:
        self.set_1 = 0.
      if self.set_2 is None:
        self.set_2 = 0.
      if self.set_3 is None:
        self.set_3 = 0.
      if self.set_4 is None:
        self.set_4 = 0.
      if self.set_5 is None:
        self.set_5 = 0.
      if self.set_GRIP is None:
        self.set_GRIP = False
      if self.emergency_stop is None:
        self.emergency_stop = False
      if self.GoHome is None:
        self.GoHome = 0
    else:
      self.set_1 = 0.
      self.set_2 = 0.
      self.set_3 = 0.
      self.set_4 = 0.
      self.set_5 = 0.
      self.set_GRIP = False
      self.emergency_stop = False
      self.GoHome = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_5f2Bb().pack(_x.set_1, _x.set_2, _x.set_3, _x.set_4, _x.set_5, _x.set_GRIP, _x.emergency_stop, _x.GoHome))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 23
      (_x.set_1, _x.set_2, _x.set_3, _x.set_4, _x.set_5, _x.set_GRIP, _x.emergency_stop, _x.GoHome,) = _get_struct_5f2Bb().unpack(str[start:end])
      self.set_GRIP = bool(self.set_GRIP)
      self.emergency_stop = bool(self.emergency_stop)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_5f2Bb().pack(_x.set_1, _x.set_2, _x.set_3, _x.set_4, _x.set_5, _x.set_GRIP, _x.emergency_stop, _x.GoHome))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 23
      (_x.set_1, _x.set_2, _x.set_3, _x.set_4, _x.set_5, _x.set_GRIP, _x.emergency_stop, _x.GoHome,) = _get_struct_5f2Bb().unpack(str[start:end])
      self.set_GRIP = bool(self.set_GRIP)
      self.emergency_stop = bool(self.emergency_stop)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5f2Bb = None
def _get_struct_5f2Bb():
    global _struct_5f2Bb
    if _struct_5f2Bb is None:
        _struct_5f2Bb = struct.Struct("<5f2Bb")
    return _struct_5f2Bb
